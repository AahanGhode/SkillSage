{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\matth\\\\Desktop\\\\quizwiz\\\\frontend\\\\src\\\\components\\\\Cards.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './Cards.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Cards = () => {\n  _s();\n  const flashcards = [{\n    question: \"What is the capital of France?\",\n    answer: \"Paris\"\n  }, {\n    question: \"What is the largest planet in our solar system?\",\n    answer: \"Jupiter\"\n  }, {\n    question: \"Who wrote 'Romeo and Juliet'?\",\n    answer: \"William Shakespeare\"\n  }, {\n    question: \"What is the chemical symbol for water?\",\n    answer: \"H2O\"\n  }, {\n    question: \"What is the powerhouse of the cell?\",\n    answer: \"Mitochondria\"\n  }];\n  const [currentFlashcardIndex, setCurrentFlashcardIndex] = useState(0);\n  const [isFlipped, setIsFlipped] = useState(false);\n  useEffect(() => {\n    const handleKeyPress = event => {\n      if (event.keyCode === 37) {\n        // Left arrow key\n        setCurrentFlashcardIndex(prevIndex => (prevIndex - 1 + flashcards.length) % flashcards.length);\n        setIsFlipped(false);\n      } else if (event.keyCode === 39) {\n        // Right arrow key\n        setCurrentFlashcardIndex(prevIndex => (prevIndex + 1) % flashcards.length);\n        setIsFlipped(false);\n      } else if (event.keyCode === 32) {\n        // Spacebar\n        setIsFlipped(!isFlipped);\n      }\n    };\n    document.addEventListener('keydown', handleKeyPress);\n    return () => {\n      document.removeEventListener('keydown', handleKeyPress);\n    };\n  }, [currentFlashcardIndex, isFlipped, flashcards.length]);\n  const currentFlashcard = flashcards[currentFlashcardIndex];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flashcard\",\n    onClick: () => setIsFlipped(!isFlipped),\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `card ${isFlipped ? 'flipped' : ''}`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-front\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: currentFlashcard.question\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-back\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: currentFlashcard.answer\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n};\n_s(Cards, \"pZuIAW88ZIyYLgNekk7VT8/CUK0=\");\n_c = Cards;\nexport default Cards;\nvar _c;\n$RefreshReg$(_c, \"Cards\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Cards","_s","flashcards","question","answer","currentFlashcardIndex","setCurrentFlashcardIndex","isFlipped","setIsFlipped","handleKeyPress","event","keyCode","prevIndex","length","document","addEventListener","removeEventListener","currentFlashcard","className","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/matth/Desktop/quizwiz/frontend/src/components/Cards.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './Cards.css';\r\n\r\nconst Cards = () => {\r\n\r\n    const flashcards = [\r\n        { question: \"What is the capital of France?\", answer: \"Paris\" },\r\n        { question: \"What is the largest planet in our solar system?\", answer: \"Jupiter\" },\r\n        { question: \"Who wrote 'Romeo and Juliet'?\", answer: \"William Shakespeare\" },\r\n        { question: \"What is the chemical symbol for water?\", answer: \"H2O\" },\r\n        { question: \"What is the powerhouse of the cell?\", answer: \"Mitochondria\" }\r\n    ];\r\n\r\n    const [currentFlashcardIndex, setCurrentFlashcardIndex] = useState(0);\r\n    const [isFlipped, setIsFlipped] = useState(false);\r\n\r\n    useEffect(() => {\r\n\r\n        const handleKeyPress = (event) => {\r\n            if (event.keyCode === 37) { // Left arrow key\r\n                setCurrentFlashcardIndex((prevIndex) => (prevIndex - 1 + flashcards.length) % flashcards.length);\r\n                setIsFlipped(false);\r\n            } else if (event.keyCode === 39) { // Right arrow key\r\n                setCurrentFlashcardIndex((prevIndex) => (prevIndex + 1) % flashcards.length);\r\n                setIsFlipped(false);\r\n            } else if (event.keyCode === 32) { // Spacebar\r\n                setIsFlipped(!isFlipped);\r\n            }\r\n        };\r\n\r\n        document.addEventListener('keydown', handleKeyPress);\r\n\r\n        return () => {\r\n            document.removeEventListener('keydown', handleKeyPress);\r\n        };\r\n    }, [currentFlashcardIndex, isFlipped, flashcards.length]);\r\n\r\n    const currentFlashcard = flashcards[currentFlashcardIndex];\r\n\r\n    return (\r\n        <div className=\"flashcard\" onClick={() => setIsFlipped(!isFlipped)}>\r\n            <div className={`card ${isFlipped ? 'flipped' : ''}`}>\r\n                <div className=\"card-front\">\r\n                    <h2>{currentFlashcard.question}</h2>\r\n                </div>\r\n                <div className=\"card-back\">\r\n                    <h2>{currentFlashcard.answer}</h2>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Cards;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErB,MAAMC,KAAK,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAEhB,MAAMC,UAAU,GAAG,CACf;IAAEC,QAAQ,EAAE,gCAAgC;IAAEC,MAAM,EAAE;EAAQ,CAAC,EAC/D;IAAED,QAAQ,EAAE,iDAAiD;IAAEC,MAAM,EAAE;EAAU,CAAC,EAClF;IAAED,QAAQ,EAAE,+BAA+B;IAAEC,MAAM,EAAE;EAAsB,CAAC,EAC5E;IAAED,QAAQ,EAAE,wCAAwC;IAAEC,MAAM,EAAE;EAAM,CAAC,EACrE;IAAED,QAAQ,EAAE,qCAAqC;IAAEC,MAAM,EAAE;EAAe,CAAC,CAC9E;EAED,MAAM,CAACC,qBAAqB,EAAEC,wBAAwB,CAAC,GAAGV,QAAQ,CAAC,CAAC,CAAC;EACrE,MAAM,CAACW,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAEjDC,SAAS,CAAC,MAAM;IAEZ,MAAMY,cAAc,GAAIC,KAAK,IAAK;MAC9B,IAAIA,KAAK,CAACC,OAAO,KAAK,EAAE,EAAE;QAAE;QACxBL,wBAAwB,CAAEM,SAAS,IAAK,CAACA,SAAS,GAAG,CAAC,GAAGV,UAAU,CAACW,MAAM,IAAIX,UAAU,CAACW,MAAM,CAAC;QAChGL,YAAY,CAAC,KAAK,CAAC;MACvB,CAAC,MAAM,IAAIE,KAAK,CAACC,OAAO,KAAK,EAAE,EAAE;QAAE;QAC/BL,wBAAwB,CAAEM,SAAS,IAAK,CAACA,SAAS,GAAG,CAAC,IAAIV,UAAU,CAACW,MAAM,CAAC;QAC5EL,YAAY,CAAC,KAAK,CAAC;MACvB,CAAC,MAAM,IAAIE,KAAK,CAACC,OAAO,KAAK,EAAE,EAAE;QAAE;QAC/BH,YAAY,CAAC,CAACD,SAAS,CAAC;MAC5B;IACJ,CAAC;IAEDO,QAAQ,CAACC,gBAAgB,CAAC,SAAS,EAAEN,cAAc,CAAC;IAEpD,OAAO,MAAM;MACTK,QAAQ,CAACE,mBAAmB,CAAC,SAAS,EAAEP,cAAc,CAAC;IAC3D,CAAC;EACL,CAAC,EAAE,CAACJ,qBAAqB,EAAEE,SAAS,EAAEL,UAAU,CAACW,MAAM,CAAC,CAAC;EAEzD,MAAMI,gBAAgB,GAAGf,UAAU,CAACG,qBAAqB,CAAC;EAE1D,oBACIN,OAAA;IAAKmB,SAAS,EAAC,WAAW;IAACC,OAAO,EAAEA,CAAA,KAAMX,YAAY,CAAC,CAACD,SAAS,CAAE;IAAAa,QAAA,eAC/DrB,OAAA;MAAKmB,SAAS,EAAG,QAAOX,SAAS,GAAG,SAAS,GAAG,EAAG,EAAE;MAAAa,QAAA,gBACjDrB,OAAA;QAAKmB,SAAS,EAAC,YAAY;QAAAE,QAAA,eACvBrB,OAAA;UAAAqB,QAAA,EAAKH,gBAAgB,CAACd;QAAQ;UAAAkB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnC,CAAC,eACNzB,OAAA;QAAKmB,SAAS,EAAC,WAAW;QAAAE,QAAA,eACtBrB,OAAA;UAAAqB,QAAA,EAAKH,gBAAgB,CAACb;QAAM;UAAAiB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACjC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd,CAAC;AAACvB,EAAA,CAhDID,KAAK;AAAAyB,EAAA,GAALzB,KAAK;AAkDX,eAAeA,KAAK;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}